/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peknight.test.thrift.reflect;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-11")
public class MethodCall implements org.apache.thrift.TBase<MethodCall, MethodCall._Fields>, java.io.Serializable, Cloneable, Comparable<MethodCall> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MethodCall");

  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVOKER_FIELD_DESC = new org.apache.thrift.protocol.TField("invoker", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RETURN_BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("returnBeanName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MethodCallStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MethodCallTupleSchemeFactory();

  public java.lang.String className; // required
  public BeanCall invoker; // required
  public java.lang.String methodName; // required
  public java.util.List<BeanCall> paramList; // required
  public java.lang.String returnBeanName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS_NAME((short)1, "className"),
    INVOKER((short)2, "invoker"),
    METHOD_NAME((short)3, "methodName"),
    PARAM_LIST((short)4, "paramList"),
    RETURN_BEAN_NAME((short)5, "returnBeanName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS_NAME
          return CLASS_NAME;
        case 2: // INVOKER
          return INVOKER;
        case 3: // METHOD_NAME
          return METHOD_NAME;
        case 4: // PARAM_LIST
          return PARAM_LIST;
        case 5: // RETURN_BEAN_NAME
          return RETURN_BEAN_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVOKER, new org.apache.thrift.meta_data.FieldMetaData("invoker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BeanCall.class)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BeanCall.class))));
    tmpMap.put(_Fields.RETURN_BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("returnBeanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MethodCall.class, metaDataMap);
  }

  public MethodCall() {
  }

  public MethodCall(
    java.lang.String className,
    BeanCall invoker,
    java.lang.String methodName,
    java.util.List<BeanCall> paramList,
    java.lang.String returnBeanName)
  {
    this();
    this.className = className;
    this.invoker = invoker;
    this.methodName = methodName;
    this.paramList = paramList;
    this.returnBeanName = returnBeanName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MethodCall(MethodCall other) {
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetInvoker()) {
      this.invoker = new BeanCall(other.invoker);
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetParamList()) {
      java.util.List<BeanCall> __this__paramList = new java.util.ArrayList<BeanCall>(other.paramList.size());
      for (BeanCall other_element : other.paramList) {
        __this__paramList.add(new BeanCall(other_element));
      }
      this.paramList = __this__paramList;
    }
    if (other.isSetReturnBeanName()) {
      this.returnBeanName = other.returnBeanName;
    }
  }

  public MethodCall deepCopy() {
    return new MethodCall(this);
  }

  @Override
  public void clear() {
    this.className = null;
    this.invoker = null;
    this.methodName = null;
    this.paramList = null;
    this.returnBeanName = null;
  }

  public java.lang.String getClassName() {
    return this.className;
  }

  public MethodCall setClassName(java.lang.String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public BeanCall getInvoker() {
    return this.invoker;
  }

  public MethodCall setInvoker(BeanCall invoker) {
    this.invoker = invoker;
    return this;
  }

  public void unsetInvoker() {
    this.invoker = null;
  }

  /** Returns true if field invoker is set (has been assigned a value) and false otherwise */
  public boolean isSetInvoker() {
    return this.invoker != null;
  }

  public void setInvokerIsSet(boolean value) {
    if (!value) {
      this.invoker = null;
    }
  }

  public java.lang.String getMethodName() {
    return this.methodName;
  }

  public MethodCall setMethodName(java.lang.String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public int getParamListSize() {
    return (this.paramList == null) ? 0 : this.paramList.size();
  }

  public java.util.Iterator<BeanCall> getParamListIterator() {
    return (this.paramList == null) ? null : this.paramList.iterator();
  }

  public void addToParamList(BeanCall elem) {
    if (this.paramList == null) {
      this.paramList = new java.util.ArrayList<BeanCall>();
    }
    this.paramList.add(elem);
  }

  public java.util.List<BeanCall> getParamList() {
    return this.paramList;
  }

  public MethodCall setParamList(java.util.List<BeanCall> paramList) {
    this.paramList = paramList;
    return this;
  }

  public void unsetParamList() {
    this.paramList = null;
  }

  /** Returns true if field paramList is set (has been assigned a value) and false otherwise */
  public boolean isSetParamList() {
    return this.paramList != null;
  }

  public void setParamListIsSet(boolean value) {
    if (!value) {
      this.paramList = null;
    }
  }

  public java.lang.String getReturnBeanName() {
    return this.returnBeanName;
  }

  public MethodCall setReturnBeanName(java.lang.String returnBeanName) {
    this.returnBeanName = returnBeanName;
    return this;
  }

  public void unsetReturnBeanName() {
    this.returnBeanName = null;
  }

  /** Returns true if field returnBeanName is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnBeanName() {
    return this.returnBeanName != null;
  }

  public void setReturnBeanNameIsSet(boolean value) {
    if (!value) {
      this.returnBeanName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((java.lang.String)value);
      }
      break;

    case INVOKER:
      if (value == null) {
        unsetInvoker();
      } else {
        setInvoker((BeanCall)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((java.lang.String)value);
      }
      break;

    case PARAM_LIST:
      if (value == null) {
        unsetParamList();
      } else {
        setParamList((java.util.List<BeanCall>)value);
      }
      break;

    case RETURN_BEAN_NAME:
      if (value == null) {
        unsetReturnBeanName();
      } else {
        setReturnBeanName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS_NAME:
      return getClassName();

    case INVOKER:
      return getInvoker();

    case METHOD_NAME:
      return getMethodName();

    case PARAM_LIST:
      return getParamList();

    case RETURN_BEAN_NAME:
      return getReturnBeanName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLASS_NAME:
      return isSetClassName();
    case INVOKER:
      return isSetInvoker();
    case METHOD_NAME:
      return isSetMethodName();
    case PARAM_LIST:
      return isSetParamList();
    case RETURN_BEAN_NAME:
      return isSetReturnBeanName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MethodCall)
      return this.equals((MethodCall)that);
    return false;
  }

  public boolean equals(MethodCall that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_invoker = true && this.isSetInvoker();
    boolean that_present_invoker = true && that.isSetInvoker();
    if (this_present_invoker || that_present_invoker) {
      if (!(this_present_invoker && that_present_invoker))
        return false;
      if (!this.invoker.equals(that.invoker))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_paramList = true && this.isSetParamList();
    boolean that_present_paramList = true && that.isSetParamList();
    if (this_present_paramList || that_present_paramList) {
      if (!(this_present_paramList && that_present_paramList))
        return false;
      if (!this.paramList.equals(that.paramList))
        return false;
    }

    boolean this_present_returnBeanName = true && this.isSetReturnBeanName();
    boolean that_present_returnBeanName = true && that.isSetReturnBeanName();
    if (this_present_returnBeanName || that_present_returnBeanName) {
      if (!(this_present_returnBeanName && that_present_returnBeanName))
        return false;
      if (!this.returnBeanName.equals(that.returnBeanName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
    if (isSetClassName())
      hashCode = hashCode * 8191 + className.hashCode();

    hashCode = hashCode * 8191 + ((isSetInvoker()) ? 131071 : 524287);
    if (isSetInvoker())
      hashCode = hashCode * 8191 + invoker.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
    if (isSetMethodName())
      hashCode = hashCode * 8191 + methodName.hashCode();

    hashCode = hashCode * 8191 + ((isSetParamList()) ? 131071 : 524287);
    if (isSetParamList())
      hashCode = hashCode * 8191 + paramList.hashCode();

    hashCode = hashCode * 8191 + ((isSetReturnBeanName()) ? 131071 : 524287);
    if (isSetReturnBeanName())
      hashCode = hashCode * 8191 + returnBeanName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MethodCall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvoker()).compareTo(other.isSetInvoker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvoker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoker, other.invoker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParamList()).compareTo(other.isSetParamList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramList, other.paramList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReturnBeanName()).compareTo(other.isSetReturnBeanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnBeanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnBeanName, other.returnBeanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MethodCall(");
    boolean first = true;

    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invoker:");
    if (this.invoker == null) {
      sb.append("null");
    } else {
      sb.append(this.invoker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramList:");
    if (this.paramList == null) {
      sb.append("null");
    } else {
      sb.append(this.paramList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnBeanName:");
    if (this.returnBeanName == null) {
      sb.append("null");
    } else {
      sb.append(this.returnBeanName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (invoker != null) {
      invoker.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MethodCallStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MethodCallStandardScheme getScheme() {
      return new MethodCallStandardScheme();
    }
  }

  private static class MethodCallStandardScheme extends org.apache.thrift.scheme.StandardScheme<MethodCall> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MethodCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVOKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.invoker = new BeanCall();
              struct.invoker.read(iprot);
              struct.setInvokerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.paramList = new java.util.ArrayList<BeanCall>(_list80.size);
                BeanCall _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new BeanCall();
                  _elem81.read(iprot);
                  struct.paramList.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setParamListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETURN_BEAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnBeanName = iprot.readString();
              struct.setReturnBeanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MethodCall struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.className);
        oprot.writeFieldEnd();
      }
      if (struct.invoker != null) {
        oprot.writeFieldBegin(INVOKER_FIELD_DESC);
        struct.invoker.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.paramList != null) {
        oprot.writeFieldBegin(PARAM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.paramList.size()));
          for (BeanCall _iter83 : struct.paramList)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.returnBeanName != null) {
        oprot.writeFieldBegin(RETURN_BEAN_NAME_FIELD_DESC);
        oprot.writeString(struct.returnBeanName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MethodCallTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MethodCallTupleScheme getScheme() {
      return new MethodCallTupleScheme();
    }
  }

  private static class MethodCallTupleScheme extends org.apache.thrift.scheme.TupleScheme<MethodCall> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MethodCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClassName()) {
        optionals.set(0);
      }
      if (struct.isSetInvoker()) {
        optionals.set(1);
      }
      if (struct.isSetMethodName()) {
        optionals.set(2);
      }
      if (struct.isSetParamList()) {
        optionals.set(3);
      }
      if (struct.isSetReturnBeanName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetClassName()) {
        oprot.writeString(struct.className);
      }
      if (struct.isSetInvoker()) {
        struct.invoker.write(oprot);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetParamList()) {
        {
          oprot.writeI32(struct.paramList.size());
          for (BeanCall _iter84 : struct.paramList)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetReturnBeanName()) {
        oprot.writeString(struct.returnBeanName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MethodCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.className = iprot.readString();
        struct.setClassNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.invoker = new BeanCall();
        struct.invoker.read(iprot);
        struct.setInvokerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.paramList = new java.util.ArrayList<BeanCall>(_list85.size);
          BeanCall _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new BeanCall();
            _elem86.read(iprot);
            struct.paramList.add(_elem86);
          }
        }
        struct.setParamListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.returnBeanName = iprot.readString();
        struct.setReturnBeanNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

