/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peknight.test.thrift.reflect;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-10")
public class ReflectService {

  public interface Iface {

    /**
     * 获取类信息
     * 
     * @param className
     * @param searchPackages
     */
    public ClassInfo getClass(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException;

    /**
     * 列出包中所有的类
     * 
     * @param basePackages
     * @param searchPackages
     */
    public java.util.List<ClassInfo> listClass(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException;

    /**
     * 列出所有的bean
     */
    public java.util.List<BeanInfo> listBean() throws org.apache.thrift.TException;

    /**
     * 获取方法信息
     * 
     * @param className
     * @param methodName
     * @param paramList
     * @param searchPackages
     */
    public MethodInfo getMethod(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException;

    /**
     * 列出类所有方法
     * 
     * @param className
     * @param searchPackages
     */
    public java.util.List<MethodInfo> listMethod(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException;

    /**
     * 创建Bean
     * 
     * @param beanCall
     */
    public ActionResult createBean(BeanCall beanCall) throws org.apache.thrift.TException;

    /**
     * 执行方法
     * 
     * @param methodCall
     */
    public ActionResult invokeMethod(MethodCall methodCall) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getClass(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<ClassInfo> resultHandler) throws org.apache.thrift.TException;

    public void listClass(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>> resultHandler) throws org.apache.thrift.TException;

    public void listBean(org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>> resultHandler) throws org.apache.thrift.TException;

    public void getMethod(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<MethodInfo> resultHandler) throws org.apache.thrift.TException;

    public void listMethod(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>> resultHandler) throws org.apache.thrift.TException;

    public void createBean(BeanCall beanCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException;

    public void invokeMethod(MethodCall methodCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ClassInfo getClass(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      send_getClass(className, searchPackages);
      return recv_getClass();
    }

    public void send_getClass(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      getClass_args args = new getClass_args();
      args.setClassName(className);
      args.setSearchPackages(searchPackages);
      sendBase("getClass", args);
    }

    public ClassInfo recv_getClass() throws org.apache.thrift.TException
    {
      getClass_result result = new getClass_result();
      receiveBase(result, "getClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClass failed: unknown result");
    }

    public java.util.List<ClassInfo> listClass(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      send_listClass(basePackages, searchPackages);
      return recv_listClass();
    }

    public void send_listClass(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      listClass_args args = new listClass_args();
      args.setBasePackages(basePackages);
      args.setSearchPackages(searchPackages);
      sendBase("listClass", args);
    }

    public java.util.List<ClassInfo> recv_listClass() throws org.apache.thrift.TException
    {
      listClass_result result = new listClass_result();
      receiveBase(result, "listClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listClass failed: unknown result");
    }

    public java.util.List<BeanInfo> listBean() throws org.apache.thrift.TException
    {
      send_listBean();
      return recv_listBean();
    }

    public void send_listBean() throws org.apache.thrift.TException
    {
      listBean_args args = new listBean_args();
      sendBase("listBean", args);
    }

    public java.util.List<BeanInfo> recv_listBean() throws org.apache.thrift.TException
    {
      listBean_result result = new listBean_result();
      receiveBase(result, "listBean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBean failed: unknown result");
    }

    public MethodInfo getMethod(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      send_getMethod(className, methodName, paramList, searchPackages);
      return recv_getMethod();
    }

    public void send_getMethod(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      getMethod_args args = new getMethod_args();
      args.setClassName(className);
      args.setMethodName(methodName);
      args.setParamList(paramList);
      args.setSearchPackages(searchPackages);
      sendBase("getMethod", args);
    }

    public MethodInfo recv_getMethod() throws org.apache.thrift.TException
    {
      getMethod_result result = new getMethod_result();
      receiveBase(result, "getMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMethod failed: unknown result");
    }

    public java.util.List<MethodInfo> listMethod(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      send_listMethod(className, searchPackages);
      return recv_listMethod();
    }

    public void send_listMethod(java.lang.String className, java.util.List<java.lang.String> searchPackages) throws org.apache.thrift.TException
    {
      listMethod_args args = new listMethod_args();
      args.setClassName(className);
      args.setSearchPackages(searchPackages);
      sendBase("listMethod", args);
    }

    public java.util.List<MethodInfo> recv_listMethod() throws org.apache.thrift.TException
    {
      listMethod_result result = new listMethod_result();
      receiveBase(result, "listMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMethod failed: unknown result");
    }

    public ActionResult createBean(BeanCall beanCall) throws org.apache.thrift.TException
    {
      send_createBean(beanCall);
      return recv_createBean();
    }

    public void send_createBean(BeanCall beanCall) throws org.apache.thrift.TException
    {
      createBean_args args = new createBean_args();
      args.setBeanCall(beanCall);
      sendBase("createBean", args);
    }

    public ActionResult recv_createBean() throws org.apache.thrift.TException
    {
      createBean_result result = new createBean_result();
      receiveBase(result, "createBean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBean failed: unknown result");
    }

    public ActionResult invokeMethod(MethodCall methodCall) throws org.apache.thrift.TException
    {
      send_invokeMethod(methodCall);
      return recv_invokeMethod();
    }

    public void send_invokeMethod(MethodCall methodCall) throws org.apache.thrift.TException
    {
      invokeMethod_args args = new invokeMethod_args();
      args.setMethodCall(methodCall);
      sendBase("invokeMethod", args);
    }

    public ActionResult recv_invokeMethod() throws org.apache.thrift.TException
    {
      invokeMethod_result result = new invokeMethod_result();
      receiveBase(result, "invokeMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invokeMethod failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getClass(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<ClassInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClass_call method_call = new getClass_call(className, searchPackages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClass_call extends org.apache.thrift.async.TAsyncMethodCall<ClassInfo> {
      private java.lang.String className;
      private java.util.List<java.lang.String> searchPackages;
      public getClass_call(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<ClassInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.className = className;
        this.searchPackages = searchPackages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClass_args args = new getClass_args();
        args.setClassName(className);
        args.setSearchPackages(searchPackages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClassInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClass();
      }
    }

    public void listClass(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listClass_call method_call = new listClass_call(basePackages, searchPackages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listClass_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ClassInfo>> {
      private java.util.List<java.lang.String> basePackages;
      private java.util.List<java.lang.String> searchPackages;
      public listClass_call(java.util.List<java.lang.String> basePackages, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.basePackages = basePackages;
        this.searchPackages = searchPackages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listClass_args args = new listClass_args();
        args.setBasePackages(basePackages);
        args.setSearchPackages(searchPackages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ClassInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listClass();
      }
    }

    public void listBean(org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBean_call method_call = new listBean_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBean_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<BeanInfo>> {
      public listBean_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBean_args args = new listBean_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<BeanInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBean();
      }
    }

    public void getMethod(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<MethodInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMethod_call method_call = new getMethod_call(className, methodName, paramList, searchPackages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMethod_call extends org.apache.thrift.async.TAsyncMethodCall<MethodInfo> {
      private java.lang.String className;
      private java.lang.String methodName;
      private java.util.List<java.lang.String> paramList;
      private java.util.List<java.lang.String> searchPackages;
      public getMethod_call(java.lang.String className, java.lang.String methodName, java.util.List<java.lang.String> paramList, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<MethodInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.className = className;
        this.methodName = methodName;
        this.paramList = paramList;
        this.searchPackages = searchPackages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMethod_args args = new getMethod_args();
        args.setClassName(className);
        args.setMethodName(methodName);
        args.setParamList(paramList);
        args.setSearchPackages(searchPackages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MethodInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMethod();
      }
    }

    public void listMethod(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMethod_call method_call = new listMethod_call(className, searchPackages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMethod_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MethodInfo>> {
      private java.lang.String className;
      private java.util.List<java.lang.String> searchPackages;
      public listMethod_call(java.lang.String className, java.util.List<java.lang.String> searchPackages, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.className = className;
        this.searchPackages = searchPackages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMethod_args args = new listMethod_args();
        args.setClassName(className);
        args.setSearchPackages(searchPackages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MethodInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMethod();
      }
    }

    public void createBean(BeanCall beanCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBean_call method_call = new createBean_call(beanCall, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBean_call extends org.apache.thrift.async.TAsyncMethodCall<ActionResult> {
      private BeanCall beanCall;
      public createBean_call(BeanCall beanCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.beanCall = beanCall;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBean_args args = new createBean_args();
        args.setBeanCall(beanCall);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ActionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBean();
      }
    }

    public void invokeMethod(MethodCall methodCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invokeMethod_call method_call = new invokeMethod_call(methodCall, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invokeMethod_call extends org.apache.thrift.async.TAsyncMethodCall<ActionResult> {
      private MethodCall methodCall;
      public invokeMethod_call(MethodCall methodCall, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.methodCall = methodCall;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invokeMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invokeMethod_args args = new invokeMethod_args();
        args.setMethodCall(methodCall);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ActionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invokeMethod();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getClass", new getClass());
      processMap.put("listClass", new listClass());
      processMap.put("listBean", new listBean());
      processMap.put("getMethod", new getMethod());
      processMap.put("listMethod", new listMethod());
      processMap.put("createBean", new createBean());
      processMap.put("invokeMethod", new invokeMethod());
      return processMap;
    }

    public static class getClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClass_args> {
      public getClass() {
        super("getClass");
      }

      public getClass_args getEmptyArgsInstance() {
        return new getClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClass_result getResult(I iface, getClass_args args) throws org.apache.thrift.TException {
        getClass_result result = new getClass_result();
        result.success = iface.getClass(args.className, args.searchPackages);
        return result;
      }
    }

    public static class listClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listClass_args> {
      public listClass() {
        super("listClass");
      }

      public listClass_args getEmptyArgsInstance() {
        return new listClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listClass_result getResult(I iface, listClass_args args) throws org.apache.thrift.TException {
        listClass_result result = new listClass_result();
        result.success = iface.listClass(args.basePackages, args.searchPackages);
        return result;
      }
    }

    public static class listBean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBean_args> {
      public listBean() {
        super("listBean");
      }

      public listBean_args getEmptyArgsInstance() {
        return new listBean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBean_result getResult(I iface, listBean_args args) throws org.apache.thrift.TException {
        listBean_result result = new listBean_result();
        result.success = iface.listBean();
        return result;
      }
    }

    public static class getMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMethod_args> {
      public getMethod() {
        super("getMethod");
      }

      public getMethod_args getEmptyArgsInstance() {
        return new getMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMethod_result getResult(I iface, getMethod_args args) throws org.apache.thrift.TException {
        getMethod_result result = new getMethod_result();
        result.success = iface.getMethod(args.className, args.methodName, args.paramList, args.searchPackages);
        return result;
      }
    }

    public static class listMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMethod_args> {
      public listMethod() {
        super("listMethod");
      }

      public listMethod_args getEmptyArgsInstance() {
        return new listMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMethod_result getResult(I iface, listMethod_args args) throws org.apache.thrift.TException {
        listMethod_result result = new listMethod_result();
        result.success = iface.listMethod(args.className, args.searchPackages);
        return result;
      }
    }

    public static class createBean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBean_args> {
      public createBean() {
        super("createBean");
      }

      public createBean_args getEmptyArgsInstance() {
        return new createBean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBean_result getResult(I iface, createBean_args args) throws org.apache.thrift.TException {
        createBean_result result = new createBean_result();
        result.success = iface.createBean(args.beanCall);
        return result;
      }
    }

    public static class invokeMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invokeMethod_args> {
      public invokeMethod() {
        super("invokeMethod");
      }

      public invokeMethod_args getEmptyArgsInstance() {
        return new invokeMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public invokeMethod_result getResult(I iface, invokeMethod_args args) throws org.apache.thrift.TException {
        invokeMethod_result result = new invokeMethod_result();
        result.success = iface.invokeMethod(args.methodCall);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getClass", new getClass());
      processMap.put("listClass", new listClass());
      processMap.put("listBean", new listBean());
      processMap.put("getMethod", new getMethod());
      processMap.put("listMethod", new listMethod());
      processMap.put("createBean", new createBean());
      processMap.put("invokeMethod", new invokeMethod());
      return processMap;
    }

    public static class getClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClass_args, ClassInfo> {
      public getClass() {
        super("getClass");
      }

      public getClass_args getEmptyArgsInstance() {
        return new getClass_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ClassInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ClassInfo>() { 
          public void onComplete(ClassInfo o) {
            getClass_result result = new getClass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getClass_result result = new getClass_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClass_args args, org.apache.thrift.async.AsyncMethodCallback<ClassInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getClass(args.className, args.searchPackages,resultHandler);
      }
    }

    public static class listClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listClass_args, java.util.List<ClassInfo>> {
      public listClass() {
        super("listClass");
      }

      public listClass_args getEmptyArgsInstance() {
        return new listClass_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>>() { 
          public void onComplete(java.util.List<ClassInfo> o) {
            listClass_result result = new listClass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listClass_result result = new listClass_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listClass_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ClassInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.listClass(args.basePackages, args.searchPackages,resultHandler);
      }
    }

    public static class listBean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBean_args, java.util.List<BeanInfo>> {
      public listBean() {
        super("listBean");
      }

      public listBean_args getEmptyArgsInstance() {
        return new listBean_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>>() { 
          public void onComplete(java.util.List<BeanInfo> o) {
            listBean_result result = new listBean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listBean_result result = new listBean_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listBean_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<BeanInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.listBean(resultHandler);
      }
    }

    public static class getMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMethod_args, MethodInfo> {
      public getMethod() {
        super("getMethod");
      }

      public getMethod_args getEmptyArgsInstance() {
        return new getMethod_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MethodInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MethodInfo>() { 
          public void onComplete(MethodInfo o) {
            getMethod_result result = new getMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMethod_result result = new getMethod_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMethod_args args, org.apache.thrift.async.AsyncMethodCallback<MethodInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getMethod(args.className, args.methodName, args.paramList, args.searchPackages,resultHandler);
      }
    }

    public static class listMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMethod_args, java.util.List<MethodInfo>> {
      public listMethod() {
        super("listMethod");
      }

      public listMethod_args getEmptyArgsInstance() {
        return new listMethod_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>>() { 
          public void onComplete(java.util.List<MethodInfo> o) {
            listMethod_result result = new listMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMethod_result result = new listMethod_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMethod_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MethodInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.listMethod(args.className, args.searchPackages,resultHandler);
      }
    }

    public static class createBean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBean_args, ActionResult> {
      public createBean() {
        super("createBean");
      }

      public createBean_args getEmptyArgsInstance() {
        return new createBean_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ActionResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ActionResult>() { 
          public void onComplete(ActionResult o) {
            createBean_result result = new createBean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createBean_result result = new createBean_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createBean_args args, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException {
        iface.createBean(args.beanCall,resultHandler);
      }
    }

    public static class invokeMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, invokeMethod_args, ActionResult> {
      public invokeMethod() {
        super("invokeMethod");
      }

      public invokeMethod_args getEmptyArgsInstance() {
        return new invokeMethod_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ActionResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ActionResult>() { 
          public void onComplete(ActionResult o) {
            invokeMethod_result result = new invokeMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            invokeMethod_result result = new invokeMethod_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, invokeMethod_args args, org.apache.thrift.async.AsyncMethodCallback<ActionResult> resultHandler) throws org.apache.thrift.TException {
        iface.invokeMethod(args.methodCall,resultHandler);
      }
    }

  }

  public static class getClass_args implements org.apache.thrift.TBase<getClass_args, getClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClass_args");

    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("searchPackages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClass_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClass_argsTupleSchemeFactory();

    public java.lang.String className; // required
    public java.util.List<java.lang.String> searchPackages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLASS_NAME((short)1, "className"),
      SEARCH_PACKAGES((short)2, "searchPackages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLASS_NAME
            return CLASS_NAME;
          case 2: // SEARCH_PACKAGES
            return SEARCH_PACKAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("searchPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClass_args.class, metaDataMap);
    }

    public getClass_args() {
    }

    public getClass_args(
      java.lang.String className,
      java.util.List<java.lang.String> searchPackages)
    {
      this();
      this.className = className;
      this.searchPackages = searchPackages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClass_args(getClass_args other) {
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetSearchPackages()) {
        java.util.List<java.lang.String> __this__searchPackages = new java.util.ArrayList<java.lang.String>(other.searchPackages);
        this.searchPackages = __this__searchPackages;
      }
    }

    public getClass_args deepCopy() {
      return new getClass_args(this);
    }

    @Override
    public void clear() {
      this.className = null;
      this.searchPackages = null;
    }

    public java.lang.String getClassName() {
      return this.className;
    }

    public getClass_args setClassName(java.lang.String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public int getSearchPackagesSize() {
      return (this.searchPackages == null) ? 0 : this.searchPackages.size();
    }

    public java.util.Iterator<java.lang.String> getSearchPackagesIterator() {
      return (this.searchPackages == null) ? null : this.searchPackages.iterator();
    }

    public void addToSearchPackages(java.lang.String elem) {
      if (this.searchPackages == null) {
        this.searchPackages = new java.util.ArrayList<java.lang.String>();
      }
      this.searchPackages.add(elem);
    }

    public java.util.List<java.lang.String> getSearchPackages() {
      return this.searchPackages;
    }

    public getClass_args setSearchPackages(java.util.List<java.lang.String> searchPackages) {
      this.searchPackages = searchPackages;
      return this;
    }

    public void unsetSearchPackages() {
      this.searchPackages = null;
    }

    /** Returns true if field searchPackages is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchPackages() {
      return this.searchPackages != null;
    }

    public void setSearchPackagesIsSet(boolean value) {
      if (!value) {
        this.searchPackages = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((java.lang.String)value);
        }
        break;

      case SEARCH_PACKAGES:
        if (value == null) {
          unsetSearchPackages();
        } else {
          setSearchPackages((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLASS_NAME:
        return getClassName();

      case SEARCH_PACKAGES:
        return getSearchPackages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLASS_NAME:
        return isSetClassName();
      case SEARCH_PACKAGES:
        return isSetSearchPackages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClass_args)
        return this.equals((getClass_args)that);
      return false;
    }

    public boolean equals(getClass_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_searchPackages = true && this.isSetSearchPackages();
      boolean that_present_searchPackages = true && that.isSetSearchPackages();
      if (this_present_searchPackages || that_present_searchPackages) {
        if (!(this_present_searchPackages && that_present_searchPackages))
          return false;
        if (!this.searchPackages.equals(that.searchPackages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
      if (isSetClassName())
        hashCode = hashCode * 8191 + className.hashCode();

      hashCode = hashCode * 8191 + ((isSetSearchPackages()) ? 131071 : 524287);
      if (isSetSearchPackages())
        hashCode = hashCode * 8191 + searchPackages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSearchPackages()).compareTo(other.isSetSearchPackages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchPackages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchPackages, other.searchPackages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClass_args(");
      boolean first = true;

      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchPackages:");
      if (this.searchPackages == null) {
        sb.append("null");
      } else {
        sb.append(this.searchPackages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClass_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClass_argsStandardScheme getScheme() {
        return new getClass_argsStandardScheme();
      }
    }

    private static class getClass_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.className = iprot.readString();
                struct.setClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_PACKAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list88.size);
                  java.lang.String _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readString();
                    struct.searchPackages.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSearchPackagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.className != null) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
        if (struct.searchPackages != null) {
          oprot.writeFieldBegin(SEARCH_PACKAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.searchPackages.size()));
            for (java.lang.String _iter91 : struct.searchPackages)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClass_argsTupleScheme getScheme() {
        return new getClass_argsTupleScheme();
      }
    }

    private static class getClass_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClassName()) {
          optionals.set(0);
        }
        if (struct.isSetSearchPackages()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClassName()) {
          oprot.writeString(struct.className);
        }
        if (struct.isSetSearchPackages()) {
          {
            oprot.writeI32(struct.searchPackages.size());
            for (java.lang.String _iter92 : struct.searchPackages)
            {
              oprot.writeString(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.className = iprot.readString();
          struct.setClassNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list93.size);
            java.lang.String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.searchPackages.add(_elem94);
            }
          }
          struct.setSearchPackagesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClass_result implements org.apache.thrift.TBase<getClass_result, getClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClass_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClass_resultTupleSchemeFactory();

    public ClassInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClassInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClass_result.class, metaDataMap);
    }

    public getClass_result() {
    }

    public getClass_result(
      ClassInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClass_result(getClass_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClassInfo(other.success);
      }
    }

    public getClass_result deepCopy() {
      return new getClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ClassInfo getSuccess() {
      return this.success;
    }

    public getClass_result setSuccess(ClassInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClassInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClass_result)
        return this.equals((getClass_result)that);
      return false;
    }

    public boolean equals(getClass_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClass_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClass_resultStandardScheme getScheme() {
        return new getClass_resultStandardScheme();
      }
    }

    private static class getClass_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClassInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClass_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClass_resultTupleScheme getScheme() {
        return new getClass_resultTupleScheme();
      }
    }

    private static class getClass_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ClassInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listClass_args implements org.apache.thrift.TBase<listClass_args, listClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<listClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listClass_args");

    private static final org.apache.thrift.protocol.TField BASE_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("basePackages", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("searchPackages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listClass_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listClass_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> basePackages; // required
    public java.util.List<java.lang.String> searchPackages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_PACKAGES((short)1, "basePackages"),
      SEARCH_PACKAGES((short)2, "searchPackages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_PACKAGES
            return BASE_PACKAGES;
          case 2: // SEARCH_PACKAGES
            return SEARCH_PACKAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("basePackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SEARCH_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("searchPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listClass_args.class, metaDataMap);
    }

    public listClass_args() {
    }

    public listClass_args(
      java.util.List<java.lang.String> basePackages,
      java.util.List<java.lang.String> searchPackages)
    {
      this();
      this.basePackages = basePackages;
      this.searchPackages = searchPackages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listClass_args(listClass_args other) {
      if (other.isSetBasePackages()) {
        java.util.List<java.lang.String> __this__basePackages = new java.util.ArrayList<java.lang.String>(other.basePackages);
        this.basePackages = __this__basePackages;
      }
      if (other.isSetSearchPackages()) {
        java.util.List<java.lang.String> __this__searchPackages = new java.util.ArrayList<java.lang.String>(other.searchPackages);
        this.searchPackages = __this__searchPackages;
      }
    }

    public listClass_args deepCopy() {
      return new listClass_args(this);
    }

    @Override
    public void clear() {
      this.basePackages = null;
      this.searchPackages = null;
    }

    public int getBasePackagesSize() {
      return (this.basePackages == null) ? 0 : this.basePackages.size();
    }

    public java.util.Iterator<java.lang.String> getBasePackagesIterator() {
      return (this.basePackages == null) ? null : this.basePackages.iterator();
    }

    public void addToBasePackages(java.lang.String elem) {
      if (this.basePackages == null) {
        this.basePackages = new java.util.ArrayList<java.lang.String>();
      }
      this.basePackages.add(elem);
    }

    public java.util.List<java.lang.String> getBasePackages() {
      return this.basePackages;
    }

    public listClass_args setBasePackages(java.util.List<java.lang.String> basePackages) {
      this.basePackages = basePackages;
      return this;
    }

    public void unsetBasePackages() {
      this.basePackages = null;
    }

    /** Returns true if field basePackages is set (has been assigned a value) and false otherwise */
    public boolean isSetBasePackages() {
      return this.basePackages != null;
    }

    public void setBasePackagesIsSet(boolean value) {
      if (!value) {
        this.basePackages = null;
      }
    }

    public int getSearchPackagesSize() {
      return (this.searchPackages == null) ? 0 : this.searchPackages.size();
    }

    public java.util.Iterator<java.lang.String> getSearchPackagesIterator() {
      return (this.searchPackages == null) ? null : this.searchPackages.iterator();
    }

    public void addToSearchPackages(java.lang.String elem) {
      if (this.searchPackages == null) {
        this.searchPackages = new java.util.ArrayList<java.lang.String>();
      }
      this.searchPackages.add(elem);
    }

    public java.util.List<java.lang.String> getSearchPackages() {
      return this.searchPackages;
    }

    public listClass_args setSearchPackages(java.util.List<java.lang.String> searchPackages) {
      this.searchPackages = searchPackages;
      return this;
    }

    public void unsetSearchPackages() {
      this.searchPackages = null;
    }

    /** Returns true if field searchPackages is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchPackages() {
      return this.searchPackages != null;
    }

    public void setSearchPackagesIsSet(boolean value) {
      if (!value) {
        this.searchPackages = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BASE_PACKAGES:
        if (value == null) {
          unsetBasePackages();
        } else {
          setBasePackages((java.util.List<java.lang.String>)value);
        }
        break;

      case SEARCH_PACKAGES:
        if (value == null) {
          unsetSearchPackages();
        } else {
          setSearchPackages((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_PACKAGES:
        return getBasePackages();

      case SEARCH_PACKAGES:
        return getSearchPackages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BASE_PACKAGES:
        return isSetBasePackages();
      case SEARCH_PACKAGES:
        return isSetSearchPackages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listClass_args)
        return this.equals((listClass_args)that);
      return false;
    }

    public boolean equals(listClass_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_basePackages = true && this.isSetBasePackages();
      boolean that_present_basePackages = true && that.isSetBasePackages();
      if (this_present_basePackages || that_present_basePackages) {
        if (!(this_present_basePackages && that_present_basePackages))
          return false;
        if (!this.basePackages.equals(that.basePackages))
          return false;
      }

      boolean this_present_searchPackages = true && this.isSetSearchPackages();
      boolean that_present_searchPackages = true && that.isSetSearchPackages();
      if (this_present_searchPackages || that_present_searchPackages) {
        if (!(this_present_searchPackages && that_present_searchPackages))
          return false;
        if (!this.searchPackages.equals(that.searchPackages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBasePackages()) ? 131071 : 524287);
      if (isSetBasePackages())
        hashCode = hashCode * 8191 + basePackages.hashCode();

      hashCode = hashCode * 8191 + ((isSetSearchPackages()) ? 131071 : 524287);
      if (isSetSearchPackages())
        hashCode = hashCode * 8191 + searchPackages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBasePackages()).compareTo(other.isSetBasePackages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBasePackages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basePackages, other.basePackages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSearchPackages()).compareTo(other.isSetSearchPackages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchPackages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchPackages, other.searchPackages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listClass_args(");
      boolean first = true;

      sb.append("basePackages:");
      if (this.basePackages == null) {
        sb.append("null");
      } else {
        sb.append(this.basePackages);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchPackages:");
      if (this.searchPackages == null) {
        sb.append("null");
      } else {
        sb.append(this.searchPackages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listClass_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listClass_argsStandardScheme getScheme() {
        return new listClass_argsStandardScheme();
      }
    }

    private static class listClass_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_PACKAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.basePackages = new java.util.ArrayList<java.lang.String>(_list96.size);
                  java.lang.String _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readString();
                    struct.basePackages.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setBasePackagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_PACKAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                  struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list99.size);
                  java.lang.String _elem100;
                  for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                  {
                    _elem100 = iprot.readString();
                    struct.searchPackages.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSearchPackagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.basePackages != null) {
          oprot.writeFieldBegin(BASE_PACKAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.basePackages.size()));
            for (java.lang.String _iter102 : struct.basePackages)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.searchPackages != null) {
          oprot.writeFieldBegin(SEARCH_PACKAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.searchPackages.size()));
            for (java.lang.String _iter103 : struct.searchPackages)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listClass_argsTupleScheme getScheme() {
        return new listClass_argsTupleScheme();
      }
    }

    private static class listClass_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBasePackages()) {
          optionals.set(0);
        }
        if (struct.isSetSearchPackages()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBasePackages()) {
          {
            oprot.writeI32(struct.basePackages.size());
            for (java.lang.String _iter104 : struct.basePackages)
            {
              oprot.writeString(_iter104);
            }
          }
        }
        if (struct.isSetSearchPackages()) {
          {
            oprot.writeI32(struct.searchPackages.size());
            for (java.lang.String _iter105 : struct.searchPackages)
            {
              oprot.writeString(_iter105);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.basePackages = new java.util.ArrayList<java.lang.String>(_list106.size);
            java.lang.String _elem107;
            for (int _i108 = 0; _i108 < _list106.size; ++_i108)
            {
              _elem107 = iprot.readString();
              struct.basePackages.add(_elem107);
            }
          }
          struct.setBasePackagesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list109.size);
            java.lang.String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.searchPackages.add(_elem110);
            }
          }
          struct.setSearchPackagesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listClass_result implements org.apache.thrift.TBase<listClass_result, listClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<listClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listClass_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listClass_resultTupleSchemeFactory();

    public java.util.List<ClassInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClassInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listClass_result.class, metaDataMap);
    }

    public listClass_result() {
    }

    public listClass_result(
      java.util.List<ClassInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listClass_result(listClass_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ClassInfo> __this__success = new java.util.ArrayList<ClassInfo>(other.success.size());
        for (ClassInfo other_element : other.success) {
          __this__success.add(new ClassInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public listClass_result deepCopy() {
      return new listClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ClassInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ClassInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ClassInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<ClassInfo> getSuccess() {
      return this.success;
    }

    public listClass_result setSuccess(java.util.List<ClassInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ClassInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listClass_result)
        return this.equals((listClass_result)that);
      return false;
    }

    public boolean equals(listClass_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listClass_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listClass_resultStandardScheme getScheme() {
        return new listClass_resultStandardScheme();
      }
    }

    private static class listClass_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ClassInfo>(_list112.size);
                  ClassInfo _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new ClassInfo();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ClassInfo _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listClass_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listClass_resultTupleScheme getScheme() {
        return new listClass_resultTupleScheme();
      }
    }

    private static class listClass_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ClassInfo _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<ClassInfo>(_list117.size);
            ClassInfo _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new ClassInfo();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBean_args implements org.apache.thrift.TBase<listBean_args, listBean_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBean_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBean_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBean_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBean_args.class, metaDataMap);
    }

    public listBean_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBean_args(listBean_args other) {
    }

    public listBean_args deepCopy() {
      return new listBean_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBean_args)
        return this.equals((listBean_args)that);
      return false;
    }

    public boolean equals(listBean_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(listBean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBean_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBean_argsStandardScheme getScheme() {
        return new listBean_argsStandardScheme();
      }
    }

    private static class listBean_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBean_argsTupleScheme getScheme() {
        return new listBean_argsTupleScheme();
      }
    }

    private static class listBean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBean_result implements org.apache.thrift.TBase<listBean_result, listBean_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBean_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBean_resultTupleSchemeFactory();

    public java.util.List<BeanInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BeanInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBean_result.class, metaDataMap);
    }

    public listBean_result() {
    }

    public listBean_result(
      java.util.List<BeanInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBean_result(listBean_result other) {
      if (other.isSetSuccess()) {
        java.util.List<BeanInfo> __this__success = new java.util.ArrayList<BeanInfo>(other.success.size());
        for (BeanInfo other_element : other.success) {
          __this__success.add(new BeanInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public listBean_result deepCopy() {
      return new listBean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BeanInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BeanInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<BeanInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<BeanInfo> getSuccess() {
      return this.success;
    }

    public listBean_result setSuccess(java.util.List<BeanInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<BeanInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBean_result)
        return this.equals((listBean_result)that);
      return false;
    }

    public boolean equals(listBean_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listBean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBean_resultStandardScheme getScheme() {
        return new listBean_resultStandardScheme();
      }
    }

    private static class listBean_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<BeanInfo>(_list120.size);
                  BeanInfo _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new BeanInfo();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BeanInfo _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBean_resultTupleScheme getScheme() {
        return new listBean_resultTupleScheme();
      }
    }

    private static class listBean_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BeanInfo _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<BeanInfo>(_list125.size);
            BeanInfo _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new BeanInfo();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMethod_args implements org.apache.thrift.TBase<getMethod_args, getMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMethod_args");

    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SEARCH_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("searchPackages", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMethod_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMethod_argsTupleSchemeFactory();

    public java.lang.String className; // required
    public java.lang.String methodName; // required
    public java.util.List<java.lang.String> paramList; // required
    public java.util.List<java.lang.String> searchPackages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLASS_NAME((short)1, "className"),
      METHOD_NAME((short)2, "methodName"),
      PARAM_LIST((short)3, "paramList"),
      SEARCH_PACKAGES((short)4, "searchPackages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLASS_NAME
            return CLASS_NAME;
          case 2: // METHOD_NAME
            return METHOD_NAME;
          case 3: // PARAM_LIST
            return PARAM_LIST;
          case 4: // SEARCH_PACKAGES
            return SEARCH_PACKAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SEARCH_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("searchPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMethod_args.class, metaDataMap);
    }

    public getMethod_args() {
    }

    public getMethod_args(
      java.lang.String className,
      java.lang.String methodName,
      java.util.List<java.lang.String> paramList,
      java.util.List<java.lang.String> searchPackages)
    {
      this();
      this.className = className;
      this.methodName = methodName;
      this.paramList = paramList;
      this.searchPackages = searchPackages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMethod_args(getMethod_args other) {
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetMethodName()) {
        this.methodName = other.methodName;
      }
      if (other.isSetParamList()) {
        java.util.List<java.lang.String> __this__paramList = new java.util.ArrayList<java.lang.String>(other.paramList);
        this.paramList = __this__paramList;
      }
      if (other.isSetSearchPackages()) {
        java.util.List<java.lang.String> __this__searchPackages = new java.util.ArrayList<java.lang.String>(other.searchPackages);
        this.searchPackages = __this__searchPackages;
      }
    }

    public getMethod_args deepCopy() {
      return new getMethod_args(this);
    }

    @Override
    public void clear() {
      this.className = null;
      this.methodName = null;
      this.paramList = null;
      this.searchPackages = null;
    }

    public java.lang.String getClassName() {
      return this.className;
    }

    public getMethod_args setClassName(java.lang.String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public java.lang.String getMethodName() {
      return this.methodName;
    }

    public getMethod_args setMethodName(java.lang.String methodName) {
      this.methodName = methodName;
      return this;
    }

    public void unsetMethodName() {
      this.methodName = null;
    }

    /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
    public boolean isSetMethodName() {
      return this.methodName != null;
    }

    public void setMethodNameIsSet(boolean value) {
      if (!value) {
        this.methodName = null;
      }
    }

    public int getParamListSize() {
      return (this.paramList == null) ? 0 : this.paramList.size();
    }

    public java.util.Iterator<java.lang.String> getParamListIterator() {
      return (this.paramList == null) ? null : this.paramList.iterator();
    }

    public void addToParamList(java.lang.String elem) {
      if (this.paramList == null) {
        this.paramList = new java.util.ArrayList<java.lang.String>();
      }
      this.paramList.add(elem);
    }

    public java.util.List<java.lang.String> getParamList() {
      return this.paramList;
    }

    public getMethod_args setParamList(java.util.List<java.lang.String> paramList) {
      this.paramList = paramList;
      return this;
    }

    public void unsetParamList() {
      this.paramList = null;
    }

    /** Returns true if field paramList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamList() {
      return this.paramList != null;
    }

    public void setParamListIsSet(boolean value) {
      if (!value) {
        this.paramList = null;
      }
    }

    public int getSearchPackagesSize() {
      return (this.searchPackages == null) ? 0 : this.searchPackages.size();
    }

    public java.util.Iterator<java.lang.String> getSearchPackagesIterator() {
      return (this.searchPackages == null) ? null : this.searchPackages.iterator();
    }

    public void addToSearchPackages(java.lang.String elem) {
      if (this.searchPackages == null) {
        this.searchPackages = new java.util.ArrayList<java.lang.String>();
      }
      this.searchPackages.add(elem);
    }

    public java.util.List<java.lang.String> getSearchPackages() {
      return this.searchPackages;
    }

    public getMethod_args setSearchPackages(java.util.List<java.lang.String> searchPackages) {
      this.searchPackages = searchPackages;
      return this;
    }

    public void unsetSearchPackages() {
      this.searchPackages = null;
    }

    /** Returns true if field searchPackages is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchPackages() {
      return this.searchPackages != null;
    }

    public void setSearchPackagesIsSet(boolean value) {
      if (!value) {
        this.searchPackages = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((java.lang.String)value);
        }
        break;

      case METHOD_NAME:
        if (value == null) {
          unsetMethodName();
        } else {
          setMethodName((java.lang.String)value);
        }
        break;

      case PARAM_LIST:
        if (value == null) {
          unsetParamList();
        } else {
          setParamList((java.util.List<java.lang.String>)value);
        }
        break;

      case SEARCH_PACKAGES:
        if (value == null) {
          unsetSearchPackages();
        } else {
          setSearchPackages((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLASS_NAME:
        return getClassName();

      case METHOD_NAME:
        return getMethodName();

      case PARAM_LIST:
        return getParamList();

      case SEARCH_PACKAGES:
        return getSearchPackages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLASS_NAME:
        return isSetClassName();
      case METHOD_NAME:
        return isSetMethodName();
      case PARAM_LIST:
        return isSetParamList();
      case SEARCH_PACKAGES:
        return isSetSearchPackages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMethod_args)
        return this.equals((getMethod_args)that);
      return false;
    }

    public boolean equals(getMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_methodName = true && this.isSetMethodName();
      boolean that_present_methodName = true && that.isSetMethodName();
      if (this_present_methodName || that_present_methodName) {
        if (!(this_present_methodName && that_present_methodName))
          return false;
        if (!this.methodName.equals(that.methodName))
          return false;
      }

      boolean this_present_paramList = true && this.isSetParamList();
      boolean that_present_paramList = true && that.isSetParamList();
      if (this_present_paramList || that_present_paramList) {
        if (!(this_present_paramList && that_present_paramList))
          return false;
        if (!this.paramList.equals(that.paramList))
          return false;
      }

      boolean this_present_searchPackages = true && this.isSetSearchPackages();
      boolean that_present_searchPackages = true && that.isSetSearchPackages();
      if (this_present_searchPackages || that_present_searchPackages) {
        if (!(this_present_searchPackages && that_present_searchPackages))
          return false;
        if (!this.searchPackages.equals(that.searchPackages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
      if (isSetClassName())
        hashCode = hashCode * 8191 + className.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
      if (isSetMethodName())
        hashCode = hashCode * 8191 + methodName.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamList()) ? 131071 : 524287);
      if (isSetParamList())
        hashCode = hashCode * 8191 + paramList.hashCode();

      hashCode = hashCode * 8191 + ((isSetSearchPackages()) ? 131071 : 524287);
      if (isSetSearchPackages())
        hashCode = hashCode * 8191 + searchPackages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethodName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamList()).compareTo(other.isSetParamList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramList, other.paramList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSearchPackages()).compareTo(other.isSetSearchPackages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchPackages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchPackages, other.searchPackages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMethod_args(");
      boolean first = true;

      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("methodName:");
      if (this.methodName == null) {
        sb.append("null");
      } else {
        sb.append(this.methodName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramList:");
      if (this.paramList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchPackages:");
      if (this.searchPackages == null) {
        sb.append("null");
      } else {
        sb.append(this.searchPackages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMethod_argsStandardScheme getScheme() {
        return new getMethod_argsStandardScheme();
      }
    }

    private static class getMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.className = iprot.readString();
                struct.setClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METHOD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.methodName = iprot.readString();
                struct.setMethodNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.paramList = new java.util.ArrayList<java.lang.String>(_list128.size);
                  java.lang.String _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = iprot.readString();
                    struct.paramList.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setParamListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SEARCH_PACKAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                  struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list131.size);
                  java.lang.String _elem132;
                  for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                  {
                    _elem132 = iprot.readString();
                    struct.searchPackages.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setSearchPackagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.className != null) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
        if (struct.methodName != null) {
          oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
          oprot.writeString(struct.methodName);
          oprot.writeFieldEnd();
        }
        if (struct.paramList != null) {
          oprot.writeFieldBegin(PARAM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paramList.size()));
            for (java.lang.String _iter134 : struct.paramList)
            {
              oprot.writeString(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.searchPackages != null) {
          oprot.writeFieldBegin(SEARCH_PACKAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.searchPackages.size()));
            for (java.lang.String _iter135 : struct.searchPackages)
            {
              oprot.writeString(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMethod_argsTupleScheme getScheme() {
        return new getMethod_argsTupleScheme();
      }
    }

    private static class getMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClassName()) {
          optionals.set(0);
        }
        if (struct.isSetMethodName()) {
          optionals.set(1);
        }
        if (struct.isSetParamList()) {
          optionals.set(2);
        }
        if (struct.isSetSearchPackages()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClassName()) {
          oprot.writeString(struct.className);
        }
        if (struct.isSetMethodName()) {
          oprot.writeString(struct.methodName);
        }
        if (struct.isSetParamList()) {
          {
            oprot.writeI32(struct.paramList.size());
            for (java.lang.String _iter136 : struct.paramList)
            {
              oprot.writeString(_iter136);
            }
          }
        }
        if (struct.isSetSearchPackages()) {
          {
            oprot.writeI32(struct.searchPackages.size());
            for (java.lang.String _iter137 : struct.searchPackages)
            {
              oprot.writeString(_iter137);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.className = iprot.readString();
          struct.setClassNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.methodName = iprot.readString();
          struct.setMethodNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramList = new java.util.ArrayList<java.lang.String>(_list138.size);
            java.lang.String _elem139;
            for (int _i140 = 0; _i140 < _list138.size; ++_i140)
            {
              _elem139 = iprot.readString();
              struct.paramList.add(_elem139);
            }
          }
          struct.setParamListIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list141.size);
            java.lang.String _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = iprot.readString();
              struct.searchPackages.add(_elem142);
            }
          }
          struct.setSearchPackagesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMethod_result implements org.apache.thrift.TBase<getMethod_result, getMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMethod_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMethod_resultTupleSchemeFactory();

    public MethodInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MethodInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMethod_result.class, metaDataMap);
    }

    public getMethod_result() {
    }

    public getMethod_result(
      MethodInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMethod_result(getMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = new MethodInfo(other.success);
      }
    }

    public getMethod_result deepCopy() {
      return new getMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MethodInfo getSuccess() {
      return this.success;
    }

    public getMethod_result setSuccess(MethodInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MethodInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMethod_result)
        return this.equals((getMethod_result)that);
      return false;
    }

    public boolean equals(getMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMethod_resultStandardScheme getScheme() {
        return new getMethod_resultStandardScheme();
      }
    }

    private static class getMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MethodInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMethod_resultTupleScheme getScheme() {
        return new getMethod_resultTupleScheme();
      }
    }

    private static class getMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MethodInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMethod_args implements org.apache.thrift.TBase<listMethod_args, listMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMethod_args");

    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("searchPackages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMethod_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMethod_argsTupleSchemeFactory();

    public java.lang.String className; // required
    public java.util.List<java.lang.String> searchPackages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLASS_NAME((short)1, "className"),
      SEARCH_PACKAGES((short)2, "searchPackages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLASS_NAME
            return CLASS_NAME;
          case 2: // SEARCH_PACKAGES
            return SEARCH_PACKAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("searchPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMethod_args.class, metaDataMap);
    }

    public listMethod_args() {
    }

    public listMethod_args(
      java.lang.String className,
      java.util.List<java.lang.String> searchPackages)
    {
      this();
      this.className = className;
      this.searchPackages = searchPackages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMethod_args(listMethod_args other) {
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetSearchPackages()) {
        java.util.List<java.lang.String> __this__searchPackages = new java.util.ArrayList<java.lang.String>(other.searchPackages);
        this.searchPackages = __this__searchPackages;
      }
    }

    public listMethod_args deepCopy() {
      return new listMethod_args(this);
    }

    @Override
    public void clear() {
      this.className = null;
      this.searchPackages = null;
    }

    public java.lang.String getClassName() {
      return this.className;
    }

    public listMethod_args setClassName(java.lang.String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public int getSearchPackagesSize() {
      return (this.searchPackages == null) ? 0 : this.searchPackages.size();
    }

    public java.util.Iterator<java.lang.String> getSearchPackagesIterator() {
      return (this.searchPackages == null) ? null : this.searchPackages.iterator();
    }

    public void addToSearchPackages(java.lang.String elem) {
      if (this.searchPackages == null) {
        this.searchPackages = new java.util.ArrayList<java.lang.String>();
      }
      this.searchPackages.add(elem);
    }

    public java.util.List<java.lang.String> getSearchPackages() {
      return this.searchPackages;
    }

    public listMethod_args setSearchPackages(java.util.List<java.lang.String> searchPackages) {
      this.searchPackages = searchPackages;
      return this;
    }

    public void unsetSearchPackages() {
      this.searchPackages = null;
    }

    /** Returns true if field searchPackages is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchPackages() {
      return this.searchPackages != null;
    }

    public void setSearchPackagesIsSet(boolean value) {
      if (!value) {
        this.searchPackages = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((java.lang.String)value);
        }
        break;

      case SEARCH_PACKAGES:
        if (value == null) {
          unsetSearchPackages();
        } else {
          setSearchPackages((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLASS_NAME:
        return getClassName();

      case SEARCH_PACKAGES:
        return getSearchPackages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLASS_NAME:
        return isSetClassName();
      case SEARCH_PACKAGES:
        return isSetSearchPackages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMethod_args)
        return this.equals((listMethod_args)that);
      return false;
    }

    public boolean equals(listMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_searchPackages = true && this.isSetSearchPackages();
      boolean that_present_searchPackages = true && that.isSetSearchPackages();
      if (this_present_searchPackages || that_present_searchPackages) {
        if (!(this_present_searchPackages && that_present_searchPackages))
          return false;
        if (!this.searchPackages.equals(that.searchPackages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
      if (isSetClassName())
        hashCode = hashCode * 8191 + className.hashCode();

      hashCode = hashCode * 8191 + ((isSetSearchPackages()) ? 131071 : 524287);
      if (isSetSearchPackages())
        hashCode = hashCode * 8191 + searchPackages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSearchPackages()).compareTo(other.isSetSearchPackages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchPackages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchPackages, other.searchPackages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMethod_args(");
      boolean first = true;

      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchPackages:");
      if (this.searchPackages == null) {
        sb.append("null");
      } else {
        sb.append(this.searchPackages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMethod_argsStandardScheme getScheme() {
        return new listMethod_argsStandardScheme();
      }
    }

    private static class listMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.className = iprot.readString();
                struct.setClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_PACKAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list144.size);
                  java.lang.String _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readString();
                    struct.searchPackages.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSearchPackagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.className != null) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
        if (struct.searchPackages != null) {
          oprot.writeFieldBegin(SEARCH_PACKAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.searchPackages.size()));
            for (java.lang.String _iter147 : struct.searchPackages)
            {
              oprot.writeString(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMethod_argsTupleScheme getScheme() {
        return new listMethod_argsTupleScheme();
      }
    }

    private static class listMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClassName()) {
          optionals.set(0);
        }
        if (struct.isSetSearchPackages()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClassName()) {
          oprot.writeString(struct.className);
        }
        if (struct.isSetSearchPackages()) {
          {
            oprot.writeI32(struct.searchPackages.size());
            for (java.lang.String _iter148 : struct.searchPackages)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.className = iprot.readString();
          struct.setClassNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.searchPackages = new java.util.ArrayList<java.lang.String>(_list149.size);
            java.lang.String _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readString();
              struct.searchPackages.add(_elem150);
            }
          }
          struct.setSearchPackagesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMethod_result implements org.apache.thrift.TBase<listMethod_result, listMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMethod_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMethod_resultTupleSchemeFactory();

    public java.util.List<MethodInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MethodInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMethod_result.class, metaDataMap);
    }

    public listMethod_result() {
    }

    public listMethod_result(
      java.util.List<MethodInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMethod_result(listMethod_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MethodInfo> __this__success = new java.util.ArrayList<MethodInfo>(other.success.size());
        for (MethodInfo other_element : other.success) {
          __this__success.add(new MethodInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMethod_result deepCopy() {
      return new listMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MethodInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MethodInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MethodInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<MethodInfo> getSuccess() {
      return this.success;
    }

    public listMethod_result setSuccess(java.util.List<MethodInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MethodInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMethod_result)
        return this.equals((listMethod_result)that);
      return false;
    }

    public boolean equals(listMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMethod_resultStandardScheme getScheme() {
        return new listMethod_resultStandardScheme();
      }
    }

    private static class listMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MethodInfo>(_list152.size);
                  MethodInfo _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new MethodInfo();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MethodInfo _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMethod_resultTupleScheme getScheme() {
        return new listMethod_resultTupleScheme();
      }
    }

    private static class listMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MethodInfo _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MethodInfo>(_list157.size);
            MethodInfo _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new MethodInfo();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createBean_args implements org.apache.thrift.TBase<createBean_args, createBean_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBean_args");

    private static final org.apache.thrift.protocol.TField BEAN_CALL_FIELD_DESC = new org.apache.thrift.protocol.TField("beanCall", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBean_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBean_argsTupleSchemeFactory();

    public BeanCall beanCall; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEAN_CALL((short)1, "beanCall");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEAN_CALL
            return BEAN_CALL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEAN_CALL, new org.apache.thrift.meta_data.FieldMetaData("beanCall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BeanCall.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBean_args.class, metaDataMap);
    }

    public createBean_args() {
    }

    public createBean_args(
      BeanCall beanCall)
    {
      this();
      this.beanCall = beanCall;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBean_args(createBean_args other) {
      if (other.isSetBeanCall()) {
        this.beanCall = new BeanCall(other.beanCall);
      }
    }

    public createBean_args deepCopy() {
      return new createBean_args(this);
    }

    @Override
    public void clear() {
      this.beanCall = null;
    }

    public BeanCall getBeanCall() {
      return this.beanCall;
    }

    public createBean_args setBeanCall(BeanCall beanCall) {
      this.beanCall = beanCall;
      return this;
    }

    public void unsetBeanCall() {
      this.beanCall = null;
    }

    /** Returns true if field beanCall is set (has been assigned a value) and false otherwise */
    public boolean isSetBeanCall() {
      return this.beanCall != null;
    }

    public void setBeanCallIsSet(boolean value) {
      if (!value) {
        this.beanCall = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BEAN_CALL:
        if (value == null) {
          unsetBeanCall();
        } else {
          setBeanCall((BeanCall)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BEAN_CALL:
        return getBeanCall();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BEAN_CALL:
        return isSetBeanCall();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createBean_args)
        return this.equals((createBean_args)that);
      return false;
    }

    public boolean equals(createBean_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_beanCall = true && this.isSetBeanCall();
      boolean that_present_beanCall = true && that.isSetBeanCall();
      if (this_present_beanCall || that_present_beanCall) {
        if (!(this_present_beanCall && that_present_beanCall))
          return false;
        if (!this.beanCall.equals(that.beanCall))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBeanCall()) ? 131071 : 524287);
      if (isSetBeanCall())
        hashCode = hashCode * 8191 + beanCall.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createBean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBeanCall()).compareTo(other.isSetBeanCall());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeanCall()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beanCall, other.beanCall);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBean_args(");
      boolean first = true;

      sb.append("beanCall:");
      if (this.beanCall == null) {
        sb.append("null");
      } else {
        sb.append(this.beanCall);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (beanCall != null) {
        beanCall.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBean_argsStandardScheme getScheme() {
        return new createBean_argsStandardScheme();
      }
    }

    private static class createBean_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEAN_CALL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.beanCall = new BeanCall();
                struct.beanCall.read(iprot);
                struct.setBeanCallIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.beanCall != null) {
          oprot.writeFieldBegin(BEAN_CALL_FIELD_DESC);
          struct.beanCall.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBean_argsTupleScheme getScheme() {
        return new createBean_argsTupleScheme();
      }
    }

    private static class createBean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBeanCall()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBeanCall()) {
          struct.beanCall.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.beanCall = new BeanCall();
          struct.beanCall.read(iprot);
          struct.setBeanCallIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createBean_result implements org.apache.thrift.TBase<createBean_result, createBean_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBean_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBean_resultTupleSchemeFactory();

    public ActionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBean_result.class, metaDataMap);
    }

    public createBean_result() {
    }

    public createBean_result(
      ActionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBean_result(createBean_result other) {
      if (other.isSetSuccess()) {
        this.success = new ActionResult(other.success);
      }
    }

    public createBean_result deepCopy() {
      return new createBean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ActionResult getSuccess() {
      return this.success;
    }

    public createBean_result setSuccess(ActionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ActionResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createBean_result)
        return this.equals((createBean_result)that);
      return false;
    }

    public boolean equals(createBean_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createBean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBean_resultStandardScheme getScheme() {
        return new createBean_resultStandardScheme();
      }
    }

    private static class createBean_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ActionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBean_resultTupleScheme getScheme() {
        return new createBean_resultTupleScheme();
      }
    }

    private static class createBean_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ActionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invokeMethod_args implements org.apache.thrift.TBase<invokeMethod_args, invokeMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<invokeMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeMethod_args");

    private static final org.apache.thrift.protocol.TField METHOD_CALL_FIELD_DESC = new org.apache.thrift.protocol.TField("methodCall", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeMethod_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeMethod_argsTupleSchemeFactory();

    public MethodCall methodCall; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METHOD_CALL((short)2, "methodCall");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // METHOD_CALL
            return METHOD_CALL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METHOD_CALL, new org.apache.thrift.meta_data.FieldMetaData("methodCall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MethodCall.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeMethod_args.class, metaDataMap);
    }

    public invokeMethod_args() {
    }

    public invokeMethod_args(
      MethodCall methodCall)
    {
      this();
      this.methodCall = methodCall;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeMethod_args(invokeMethod_args other) {
      if (other.isSetMethodCall()) {
        this.methodCall = new MethodCall(other.methodCall);
      }
    }

    public invokeMethod_args deepCopy() {
      return new invokeMethod_args(this);
    }

    @Override
    public void clear() {
      this.methodCall = null;
    }

    public MethodCall getMethodCall() {
      return this.methodCall;
    }

    public invokeMethod_args setMethodCall(MethodCall methodCall) {
      this.methodCall = methodCall;
      return this;
    }

    public void unsetMethodCall() {
      this.methodCall = null;
    }

    /** Returns true if field methodCall is set (has been assigned a value) and false otherwise */
    public boolean isSetMethodCall() {
      return this.methodCall != null;
    }

    public void setMethodCallIsSet(boolean value) {
      if (!value) {
        this.methodCall = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METHOD_CALL:
        if (value == null) {
          unsetMethodCall();
        } else {
          setMethodCall((MethodCall)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METHOD_CALL:
        return getMethodCall();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METHOD_CALL:
        return isSetMethodCall();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeMethod_args)
        return this.equals((invokeMethod_args)that);
      return false;
    }

    public boolean equals(invokeMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_methodCall = true && this.isSetMethodCall();
      boolean that_present_methodCall = true && that.isSetMethodCall();
      if (this_present_methodCall || that_present_methodCall) {
        if (!(this_present_methodCall && that_present_methodCall))
          return false;
        if (!this.methodCall.equals(that.methodCall))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMethodCall()) ? 131071 : 524287);
      if (isSetMethodCall())
        hashCode = hashCode * 8191 + methodCall.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMethodCall()).compareTo(other.isSetMethodCall());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethodCall()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodCall, other.methodCall);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeMethod_args(");
      boolean first = true;

      sb.append("methodCall:");
      if (this.methodCall == null) {
        sb.append("null");
      } else {
        sb.append(this.methodCall);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (methodCall != null) {
        methodCall.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeMethod_argsStandardScheme getScheme() {
        return new invokeMethod_argsStandardScheme();
      }
    }

    private static class invokeMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // METHOD_CALL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.methodCall = new MethodCall();
                struct.methodCall.read(iprot);
                struct.setMethodCallIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.methodCall != null) {
          oprot.writeFieldBegin(METHOD_CALL_FIELD_DESC);
          struct.methodCall.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeMethod_argsTupleScheme getScheme() {
        return new invokeMethod_argsTupleScheme();
      }
    }

    private static class invokeMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMethodCall()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMethodCall()) {
          struct.methodCall.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.methodCall = new MethodCall();
          struct.methodCall.read(iprot);
          struct.setMethodCallIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invokeMethod_result implements org.apache.thrift.TBase<invokeMethod_result, invokeMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<invokeMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeMethod_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeMethod_resultTupleSchemeFactory();

    public ActionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeMethod_result.class, metaDataMap);
    }

    public invokeMethod_result() {
    }

    public invokeMethod_result(
      ActionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeMethod_result(invokeMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = new ActionResult(other.success);
      }
    }

    public invokeMethod_result deepCopy() {
      return new invokeMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ActionResult getSuccess() {
      return this.success;
    }

    public invokeMethod_result setSuccess(ActionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ActionResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeMethod_result)
        return this.equals((invokeMethod_result)that);
      return false;
    }

    public boolean equals(invokeMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeMethod_resultStandardScheme getScheme() {
        return new invokeMethod_resultStandardScheme();
      }
    }

    private static class invokeMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ActionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeMethod_resultTupleScheme getScheme() {
        return new invokeMethod_resultTupleScheme();
      }
    }

    private static class invokeMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ActionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
