/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peknight.test.thrift.reflect;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-11")
public class BeanCall implements org.apache.thrift.TBase<BeanCall, BeanCall._Fields>, java.io.Serializable, Cloneable, Comparable<BeanCall> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BeanCall");

  private static final org.apache.thrift.protocol.TField DECLARED_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("declaredClassName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTUAL_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualClassName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("beanName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("beanValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONSTRUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("constructor", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField COLLECTION_COMPONENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionComponents", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_COMPONENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapComponents", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BeanCallStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BeanCallTupleSchemeFactory();

  public java.lang.String declaredClassName; // required
  public java.lang.String actualClassName; // required
  public java.lang.String beanName; // required
  public java.lang.String beanValue; // required
  public ConstructorCall constructor; // required
  public MethodCall method; // required
  public java.util.List<BeanCall> collectionComponents; // required
  public java.util.List<java.util.List<BeanCall>> mapComponents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DECLARED_CLASS_NAME((short)1, "declaredClassName"),
    ACTUAL_CLASS_NAME((short)2, "actualClassName"),
    BEAN_NAME((short)3, "beanName"),
    BEAN_VALUE((short)4, "beanValue"),
    CONSTRUCTOR((short)5, "constructor"),
    METHOD((short)6, "method"),
    COLLECTION_COMPONENTS((short)7, "collectionComponents"),
    MAP_COMPONENTS((short)8, "mapComponents");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DECLARED_CLASS_NAME
          return DECLARED_CLASS_NAME;
        case 2: // ACTUAL_CLASS_NAME
          return ACTUAL_CLASS_NAME;
        case 3: // BEAN_NAME
          return BEAN_NAME;
        case 4: // BEAN_VALUE
          return BEAN_VALUE;
        case 5: // CONSTRUCTOR
          return CONSTRUCTOR;
        case 6: // METHOD
          return METHOD;
        case 7: // COLLECTION_COMPONENTS
          return COLLECTION_COMPONENTS;
        case 8: // MAP_COMPONENTS
          return MAP_COMPONENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DECLARED_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("declaredClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("actualClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("beanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("beanValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTRUCTOR, new org.apache.thrift.meta_data.FieldMetaData("constructor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ConstructorCall")));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MethodCall")));
    tmpMap.put(_Fields.COLLECTION_COMPONENTS, new org.apache.thrift.meta_data.FieldMetaData("collectionComponents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BeanCall"))));
    tmpMap.put(_Fields.MAP_COMPONENTS, new org.apache.thrift.meta_data.FieldMetaData("mapComponents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT                , "BeanCall")))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BeanCall.class, metaDataMap);
  }

  public BeanCall() {
  }

  public BeanCall(
    java.lang.String declaredClassName,
    java.lang.String actualClassName,
    java.lang.String beanName,
    java.lang.String beanValue,
    ConstructorCall constructor,
    MethodCall method,
    java.util.List<BeanCall> collectionComponents,
    java.util.List<java.util.List<BeanCall>> mapComponents)
  {
    this();
    this.declaredClassName = declaredClassName;
    this.actualClassName = actualClassName;
    this.beanName = beanName;
    this.beanValue = beanValue;
    this.constructor = constructor;
    this.method = method;
    this.collectionComponents = collectionComponents;
    this.mapComponents = mapComponents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BeanCall(BeanCall other) {
    if (other.isSetDeclaredClassName()) {
      this.declaredClassName = other.declaredClassName;
    }
    if (other.isSetActualClassName()) {
      this.actualClassName = other.actualClassName;
    }
    if (other.isSetBeanName()) {
      this.beanName = other.beanName;
    }
    if (other.isSetBeanValue()) {
      this.beanValue = other.beanValue;
    }
    if (other.isSetConstructor()) {
      this.constructor = new ConstructorCall(other.constructor);
    }
    if (other.isSetMethod()) {
      this.method = new MethodCall(other.method);
    }
    if (other.isSetCollectionComponents()) {
      java.util.List<BeanCall> __this__collectionComponents = new java.util.ArrayList<BeanCall>(other.collectionComponents.size());
      for (BeanCall other_element : other.collectionComponents) {
        __this__collectionComponents.add(other_element);
      }
      this.collectionComponents = __this__collectionComponents;
    }
    if (other.isSetMapComponents()) {
      java.util.List<java.util.List<BeanCall>> __this__mapComponents = new java.util.ArrayList<java.util.List<BeanCall>>(other.mapComponents.size());
      for (java.util.List<BeanCall> other_element : other.mapComponents) {
        java.util.List<BeanCall> __this__mapComponents_copy = new java.util.ArrayList<BeanCall>(other_element.size());
        for (BeanCall other_element_element : other_element) {
          __this__mapComponents_copy.add(other_element_element);
        }
        __this__mapComponents.add(__this__mapComponents_copy);
      }
      this.mapComponents = __this__mapComponents;
    }
  }

  public BeanCall deepCopy() {
    return new BeanCall(this);
  }

  @Override
  public void clear() {
    this.declaredClassName = null;
    this.actualClassName = null;
    this.beanName = null;
    this.beanValue = null;
    this.constructor = null;
    this.method = null;
    this.collectionComponents = null;
    this.mapComponents = null;
  }

  public java.lang.String getDeclaredClassName() {
    return this.declaredClassName;
  }

  public BeanCall setDeclaredClassName(java.lang.String declaredClassName) {
    this.declaredClassName = declaredClassName;
    return this;
  }

  public void unsetDeclaredClassName() {
    this.declaredClassName = null;
  }

  /** Returns true if field declaredClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaredClassName() {
    return this.declaredClassName != null;
  }

  public void setDeclaredClassNameIsSet(boolean value) {
    if (!value) {
      this.declaredClassName = null;
    }
  }

  public java.lang.String getActualClassName() {
    return this.actualClassName;
  }

  public BeanCall setActualClassName(java.lang.String actualClassName) {
    this.actualClassName = actualClassName;
    return this;
  }

  public void unsetActualClassName() {
    this.actualClassName = null;
  }

  /** Returns true if field actualClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetActualClassName() {
    return this.actualClassName != null;
  }

  public void setActualClassNameIsSet(boolean value) {
    if (!value) {
      this.actualClassName = null;
    }
  }

  public java.lang.String getBeanName() {
    return this.beanName;
  }

  public BeanCall setBeanName(java.lang.String beanName) {
    this.beanName = beanName;
    return this;
  }

  public void unsetBeanName() {
    this.beanName = null;
  }

  /** Returns true if field beanName is set (has been assigned a value) and false otherwise */
  public boolean isSetBeanName() {
    return this.beanName != null;
  }

  public void setBeanNameIsSet(boolean value) {
    if (!value) {
      this.beanName = null;
    }
  }

  public java.lang.String getBeanValue() {
    return this.beanValue;
  }

  public BeanCall setBeanValue(java.lang.String beanValue) {
    this.beanValue = beanValue;
    return this;
  }

  public void unsetBeanValue() {
    this.beanValue = null;
  }

  /** Returns true if field beanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBeanValue() {
    return this.beanValue != null;
  }

  public void setBeanValueIsSet(boolean value) {
    if (!value) {
      this.beanValue = null;
    }
  }

  public ConstructorCall getConstructor() {
    return this.constructor;
  }

  public BeanCall setConstructor(ConstructorCall constructor) {
    this.constructor = constructor;
    return this;
  }

  public void unsetConstructor() {
    this.constructor = null;
  }

  /** Returns true if field constructor is set (has been assigned a value) and false otherwise */
  public boolean isSetConstructor() {
    return this.constructor != null;
  }

  public void setConstructorIsSet(boolean value) {
    if (!value) {
      this.constructor = null;
    }
  }

  public MethodCall getMethod() {
    return this.method;
  }

  public BeanCall setMethod(MethodCall method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public int getCollectionComponentsSize() {
    return (this.collectionComponents == null) ? 0 : this.collectionComponents.size();
  }

  public java.util.Iterator<BeanCall> getCollectionComponentsIterator() {
    return (this.collectionComponents == null) ? null : this.collectionComponents.iterator();
  }

  public void addToCollectionComponents(BeanCall elem) {
    if (this.collectionComponents == null) {
      this.collectionComponents = new java.util.ArrayList<BeanCall>();
    }
    this.collectionComponents.add(elem);
  }

  public java.util.List<BeanCall> getCollectionComponents() {
    return this.collectionComponents;
  }

  public BeanCall setCollectionComponents(java.util.List<BeanCall> collectionComponents) {
    this.collectionComponents = collectionComponents;
    return this;
  }

  public void unsetCollectionComponents() {
    this.collectionComponents = null;
  }

  /** Returns true if field collectionComponents is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionComponents() {
    return this.collectionComponents != null;
  }

  public void setCollectionComponentsIsSet(boolean value) {
    if (!value) {
      this.collectionComponents = null;
    }
  }

  public int getMapComponentsSize() {
    return (this.mapComponents == null) ? 0 : this.mapComponents.size();
  }

  public java.util.Iterator<java.util.List<BeanCall>> getMapComponentsIterator() {
    return (this.mapComponents == null) ? null : this.mapComponents.iterator();
  }

  public void addToMapComponents(java.util.List<BeanCall> elem) {
    if (this.mapComponents == null) {
      this.mapComponents = new java.util.ArrayList<java.util.List<BeanCall>>();
    }
    this.mapComponents.add(elem);
  }

  public java.util.List<java.util.List<BeanCall>> getMapComponents() {
    return this.mapComponents;
  }

  public BeanCall setMapComponents(java.util.List<java.util.List<BeanCall>> mapComponents) {
    this.mapComponents = mapComponents;
    return this;
  }

  public void unsetMapComponents() {
    this.mapComponents = null;
  }

  /** Returns true if field mapComponents is set (has been assigned a value) and false otherwise */
  public boolean isSetMapComponents() {
    return this.mapComponents != null;
  }

  public void setMapComponentsIsSet(boolean value) {
    if (!value) {
      this.mapComponents = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DECLARED_CLASS_NAME:
      if (value == null) {
        unsetDeclaredClassName();
      } else {
        setDeclaredClassName((java.lang.String)value);
      }
      break;

    case ACTUAL_CLASS_NAME:
      if (value == null) {
        unsetActualClassName();
      } else {
        setActualClassName((java.lang.String)value);
      }
      break;

    case BEAN_NAME:
      if (value == null) {
        unsetBeanName();
      } else {
        setBeanName((java.lang.String)value);
      }
      break;

    case BEAN_VALUE:
      if (value == null) {
        unsetBeanValue();
      } else {
        setBeanValue((java.lang.String)value);
      }
      break;

    case CONSTRUCTOR:
      if (value == null) {
        unsetConstructor();
      } else {
        setConstructor((ConstructorCall)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((MethodCall)value);
      }
      break;

    case COLLECTION_COMPONENTS:
      if (value == null) {
        unsetCollectionComponents();
      } else {
        setCollectionComponents((java.util.List<BeanCall>)value);
      }
      break;

    case MAP_COMPONENTS:
      if (value == null) {
        unsetMapComponents();
      } else {
        setMapComponents((java.util.List<java.util.List<BeanCall>>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DECLARED_CLASS_NAME:
      return getDeclaredClassName();

    case ACTUAL_CLASS_NAME:
      return getActualClassName();

    case BEAN_NAME:
      return getBeanName();

    case BEAN_VALUE:
      return getBeanValue();

    case CONSTRUCTOR:
      return getConstructor();

    case METHOD:
      return getMethod();

    case COLLECTION_COMPONENTS:
      return getCollectionComponents();

    case MAP_COMPONENTS:
      return getMapComponents();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DECLARED_CLASS_NAME:
      return isSetDeclaredClassName();
    case ACTUAL_CLASS_NAME:
      return isSetActualClassName();
    case BEAN_NAME:
      return isSetBeanName();
    case BEAN_VALUE:
      return isSetBeanValue();
    case CONSTRUCTOR:
      return isSetConstructor();
    case METHOD:
      return isSetMethod();
    case COLLECTION_COMPONENTS:
      return isSetCollectionComponents();
    case MAP_COMPONENTS:
      return isSetMapComponents();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BeanCall)
      return this.equals((BeanCall)that);
    return false;
  }

  public boolean equals(BeanCall that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_declaredClassName = true && this.isSetDeclaredClassName();
    boolean that_present_declaredClassName = true && that.isSetDeclaredClassName();
    if (this_present_declaredClassName || that_present_declaredClassName) {
      if (!(this_present_declaredClassName && that_present_declaredClassName))
        return false;
      if (!this.declaredClassName.equals(that.declaredClassName))
        return false;
    }

    boolean this_present_actualClassName = true && this.isSetActualClassName();
    boolean that_present_actualClassName = true && that.isSetActualClassName();
    if (this_present_actualClassName || that_present_actualClassName) {
      if (!(this_present_actualClassName && that_present_actualClassName))
        return false;
      if (!this.actualClassName.equals(that.actualClassName))
        return false;
    }

    boolean this_present_beanName = true && this.isSetBeanName();
    boolean that_present_beanName = true && that.isSetBeanName();
    if (this_present_beanName || that_present_beanName) {
      if (!(this_present_beanName && that_present_beanName))
        return false;
      if (!this.beanName.equals(that.beanName))
        return false;
    }

    boolean this_present_beanValue = true && this.isSetBeanValue();
    boolean that_present_beanValue = true && that.isSetBeanValue();
    if (this_present_beanValue || that_present_beanValue) {
      if (!(this_present_beanValue && that_present_beanValue))
        return false;
      if (!this.beanValue.equals(that.beanValue))
        return false;
    }

    boolean this_present_constructor = true && this.isSetConstructor();
    boolean that_present_constructor = true && that.isSetConstructor();
    if (this_present_constructor || that_present_constructor) {
      if (!(this_present_constructor && that_present_constructor))
        return false;
      if (!this.constructor.equals(that.constructor))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    boolean this_present_collectionComponents = true && this.isSetCollectionComponents();
    boolean that_present_collectionComponents = true && that.isSetCollectionComponents();
    if (this_present_collectionComponents || that_present_collectionComponents) {
      if (!(this_present_collectionComponents && that_present_collectionComponents))
        return false;
      if (!this.collectionComponents.equals(that.collectionComponents))
        return false;
    }

    boolean this_present_mapComponents = true && this.isSetMapComponents();
    boolean that_present_mapComponents = true && that.isSetMapComponents();
    if (this_present_mapComponents || that_present_mapComponents) {
      if (!(this_present_mapComponents && that_present_mapComponents))
        return false;
      if (!this.mapComponents.equals(that.mapComponents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDeclaredClassName()) ? 131071 : 524287);
    if (isSetDeclaredClassName())
      hashCode = hashCode * 8191 + declaredClassName.hashCode();

    hashCode = hashCode * 8191 + ((isSetActualClassName()) ? 131071 : 524287);
    if (isSetActualClassName())
      hashCode = hashCode * 8191 + actualClassName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBeanName()) ? 131071 : 524287);
    if (isSetBeanName())
      hashCode = hashCode * 8191 + beanName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBeanValue()) ? 131071 : 524287);
    if (isSetBeanValue())
      hashCode = hashCode * 8191 + beanValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetConstructor()) ? 131071 : 524287);
    if (isSetConstructor())
      hashCode = hashCode * 8191 + constructor.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
    if (isSetMethod())
      hashCode = hashCode * 8191 + method.hashCode();

    hashCode = hashCode * 8191 + ((isSetCollectionComponents()) ? 131071 : 524287);
    if (isSetCollectionComponents())
      hashCode = hashCode * 8191 + collectionComponents.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapComponents()) ? 131071 : 524287);
    if (isSetMapComponents())
      hashCode = hashCode * 8191 + mapComponents.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BeanCall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeclaredClassName()).compareTo(other.isSetDeclaredClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaredClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaredClassName, other.declaredClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActualClassName()).compareTo(other.isSetActualClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualClassName, other.actualClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBeanName()).compareTo(other.isSetBeanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beanName, other.beanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBeanValue()).compareTo(other.isSetBeanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeanValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beanValue, other.beanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConstructor()).compareTo(other.isSetConstructor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstructor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructor, other.constructor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollectionComponents()).compareTo(other.isSetCollectionComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionComponents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionComponents, other.collectionComponents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapComponents()).compareTo(other.isSetMapComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapComponents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapComponents, other.mapComponents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BeanCall(");
    boolean first = true;

    sb.append("declaredClassName:");
    if (this.declaredClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.declaredClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualClassName:");
    if (this.actualClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.actualClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beanName:");
    if (this.beanName == null) {
      sb.append("null");
    } else {
      sb.append(this.beanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beanValue:");
    if (this.beanValue == null) {
      sb.append("null");
    } else {
      sb.append(this.beanValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constructor:");
    if (this.constructor == null) {
      sb.append("null");
    } else {
      sb.append(this.constructor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method:");
    if (this.method == null) {
      sb.append("null");
    } else {
      sb.append(this.method);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionComponents:");
    if (this.collectionComponents == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionComponents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapComponents:");
    if (this.mapComponents == null) {
      sb.append("null");
    } else {
      sb.append(this.mapComponents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BeanCallStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BeanCallStandardScheme getScheme() {
      return new BeanCallStandardScheme();
    }
  }

  private static class BeanCallStandardScheme extends org.apache.thrift.scheme.StandardScheme<BeanCall> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BeanCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DECLARED_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaredClassName = iprot.readString();
              struct.setDeclaredClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTUAL_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualClassName = iprot.readString();
              struct.setActualClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BEAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beanName = iprot.readString();
              struct.setBeanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beanValue = iprot.readString();
              struct.setBeanValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONSTRUCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.constructor = new ConstructorCall();
              struct.constructor.read(iprot);
              struct.setConstructorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.method = new MethodCall();
              struct.method.read(iprot);
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLLECTION_COMPONENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.collectionComponents = new java.util.ArrayList<BeanCall>(_list48.size);
                BeanCall _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new BeanCall();
                  _elem49.read(iprot);
                  struct.collectionComponents.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setCollectionComponentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_COMPONENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.mapComponents = new java.util.ArrayList<java.util.List<BeanCall>>(_list51.size);
                java.util.List<BeanCall> _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  {
                    org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                    _elem52 = new java.util.ArrayList<BeanCall>(_list54.size);
                    BeanCall _elem55;
                    for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                    {
                      _elem55 = new BeanCall();
                      _elem55.read(iprot);
                      _elem52.add(_elem55);
                    }
                    iprot.readListEnd();
                  }
                  struct.mapComponents.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setMapComponentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BeanCall struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.declaredClassName != null) {
        oprot.writeFieldBegin(DECLARED_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.declaredClassName);
        oprot.writeFieldEnd();
      }
      if (struct.actualClassName != null) {
        oprot.writeFieldBegin(ACTUAL_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.actualClassName);
        oprot.writeFieldEnd();
      }
      if (struct.beanName != null) {
        oprot.writeFieldBegin(BEAN_NAME_FIELD_DESC);
        oprot.writeString(struct.beanName);
        oprot.writeFieldEnd();
      }
      if (struct.beanValue != null) {
        oprot.writeFieldBegin(BEAN_VALUE_FIELD_DESC);
        oprot.writeString(struct.beanValue);
        oprot.writeFieldEnd();
      }
      if (struct.constructor != null) {
        oprot.writeFieldBegin(CONSTRUCTOR_FIELD_DESC);
        struct.constructor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        struct.method.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.collectionComponents != null) {
        oprot.writeFieldBegin(COLLECTION_COMPONENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.collectionComponents.size()));
          for (BeanCall _iter57 : struct.collectionComponents)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapComponents != null) {
        oprot.writeFieldBegin(MAP_COMPONENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.mapComponents.size()));
          for (java.util.List<BeanCall> _iter58 : struct.mapComponents)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter58.size()));
              for (BeanCall _iter59 : _iter58)
              {
                _iter59.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BeanCallTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BeanCallTupleScheme getScheme() {
      return new BeanCallTupleScheme();
    }
  }

  private static class BeanCallTupleScheme extends org.apache.thrift.scheme.TupleScheme<BeanCall> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BeanCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeclaredClassName()) {
        optionals.set(0);
      }
      if (struct.isSetActualClassName()) {
        optionals.set(1);
      }
      if (struct.isSetBeanName()) {
        optionals.set(2);
      }
      if (struct.isSetBeanValue()) {
        optionals.set(3);
      }
      if (struct.isSetConstructor()) {
        optionals.set(4);
      }
      if (struct.isSetMethod()) {
        optionals.set(5);
      }
      if (struct.isSetCollectionComponents()) {
        optionals.set(6);
      }
      if (struct.isSetMapComponents()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDeclaredClassName()) {
        oprot.writeString(struct.declaredClassName);
      }
      if (struct.isSetActualClassName()) {
        oprot.writeString(struct.actualClassName);
      }
      if (struct.isSetBeanName()) {
        oprot.writeString(struct.beanName);
      }
      if (struct.isSetBeanValue()) {
        oprot.writeString(struct.beanValue);
      }
      if (struct.isSetConstructor()) {
        struct.constructor.write(oprot);
      }
      if (struct.isSetMethod()) {
        struct.method.write(oprot);
      }
      if (struct.isSetCollectionComponents()) {
        {
          oprot.writeI32(struct.collectionComponents.size());
          for (BeanCall _iter60 : struct.collectionComponents)
          {
            _iter60.write(oprot);
          }
        }
      }
      if (struct.isSetMapComponents()) {
        {
          oprot.writeI32(struct.mapComponents.size());
          for (java.util.List<BeanCall> _iter61 : struct.mapComponents)
          {
            {
              oprot.writeI32(_iter61.size());
              for (BeanCall _iter62 : _iter61)
              {
                _iter62.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BeanCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.declaredClassName = iprot.readString();
        struct.setDeclaredClassNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actualClassName = iprot.readString();
        struct.setActualClassNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.beanName = iprot.readString();
        struct.setBeanNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.beanValue = iprot.readString();
        struct.setBeanValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.constructor = new ConstructorCall();
        struct.constructor.read(iprot);
        struct.setConstructorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.method = new MethodCall();
        struct.method.read(iprot);
        struct.setMethodIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.collectionComponents = new java.util.ArrayList<BeanCall>(_list63.size);
          BeanCall _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = new BeanCall();
            _elem64.read(iprot);
            struct.collectionComponents.add(_elem64);
          }
        }
        struct.setCollectionComponentsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.mapComponents = new java.util.ArrayList<java.util.List<BeanCall>>(_list66.size);
          java.util.List<BeanCall> _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            {
              org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem67 = new java.util.ArrayList<BeanCall>(_list69.size);
              BeanCall _elem70;
              for (int _i71 = 0; _i71 < _list69.size; ++_i71)
              {
                _elem70 = new BeanCall();
                _elem70.read(iprot);
                _elem67.add(_elem70);
              }
            }
            struct.mapComponents.add(_elem67);
          }
        }
        struct.setMapComponentsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

